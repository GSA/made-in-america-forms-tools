/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gov.gsa.faas.tools.formapikeys;

import org.junit.Test;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

// import io.github.cdimascio.dotenv.Dotenv;

public class FormApiKeysAppTest {

    static String TEST_API_PATH = "https://dev-portal.fs.gsa.gov/dev/mtwform";
    private String formioDevApiKey = "";

    //private test helper function
    static String readFile(String path, Charset encoding) throws IOException
    {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }


    private void getPropValues() throws IOException {
 
        InputStream inputStream = null;
        String propFileName = "formiokeys.env";

		try {
			Properties prop = new Properties();
			inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);
 
			if (inputStream != null) {
				prop.load(inputStream);
			} else {
				throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
			}
 
			// get the property value and print it out
			formioDevApiKey = prop.getProperty("FORMIO_DEV_API_KEY");
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		} finally {
            if (inputStream != null) {
                inputStream.close();
            }
		}
	}

    @Test
    public void testConnectAndParse() throws IOException, InterruptedException, URISyntaxException {
        FormApiKeysApp classUnderTest = new FormApiKeysApp();
        getPropValues();
        JsonNode parsedNode = classUnderTest.connectAndParse(TEST_API_PATH, formioDevApiKey);
        assertNotNull(parsedNode);
    }

    @Test
    public void testgetApiKeys() throws URISyntaxException, IOException, InterruptedException {
        ClassLoader classLoader = getClass().getClassLoader();
        File file = new File(classLoader.getResource("formDefExample.json").getFile());

        FormApiKeysApp classUnderTest = new FormApiKeysApp();
        String jsonString = readFile(file.getAbsolutePath(), StandardCharsets.US_ASCII);
        ObjectMapper mapper = new ObjectMapper();
        JsonNode parsedNode = mapper.readTree(jsonString);
        String actualString = classUnderTest.getApiKeys(parsedNode, true);

        file = new File(classLoader.getResource("expectedOutput.txt").getFile());
        String expectedString = readFile(file.getAbsolutePath(), StandardCharsets.US_ASCII);

        // ugly way to account for line endings.
        expectedString = expectedString.replace("\r", "");
        expectedString = expectedString.replace("\n", "");
        actualString = actualString.replace("\r", "");
        actualString = actualString.replace("\n", "");

        assertEquals(expectedString, actualString);
    }

    @Test
    public void testWriteKeyOutput() throws IOException {
        FormApiKeysApp classUnderTest = new FormApiKeysApp();
        String outputContent = "This is the content that should be output";
        String outputFilename = "outputFileTest.txt";
        classUnderTest.writeKeyOutput(outputContent, outputFilename);
        File file = new File(outputFilename);
        assertTrue(file.exists());
        String fileContent = readFile(outputFilename, StandardCharsets.US_ASCII);
        assertEquals(fileContent, outputContent);
    }

}
